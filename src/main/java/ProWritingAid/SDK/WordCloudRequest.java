/*
 * ProWritingAid API V2
 * Official ProWritingAid API Version 2
 *
 * OpenAPI spec version: v2
 * Contact: hello@prowritingaid.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ProWritingAid.SDK;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * WordCloudRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-10-15T12:42:14.072+01:00")
public class WordCloudRequest {
  @SerializedName("Text")
  private String text = null;

  /**
   * The orientation of the text
   */
  @JsonAdapter(OrientationEnum.Adapter.class)
  public enum OrientationEnum {
    HORIZONTAL("Horizontal"),
    
    MOSTLYHORIZONTAL("MostlyHorizontal"),
    
    VERTICAL("Vertical"),
    
    MOSTLYVERTICAL("MostlyVertical"),
    
    HALFANDHALF("HalfAndHalf"),
    
    EVERYWHICHWAY("EveryWhichWay");

    private String value;

    OrientationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrientationEnum fromValue(String text) {
      for (OrientationEnum b : OrientationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrientationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Orientation")
  private OrientationEnum orientation = OrientationEnum.EVERYWHICHWAY;

  /**
   * The method to be used for casing
   */
  @JsonAdapter(CaseMethodEnum.Adapter.class)
  public enum CaseMethodEnum {
    PRESERVECASE("PreserveCase"),
    
    LOWERCASE("Lowercase"),
    
    UPPERCASE("Uppercase"),
    
    INTELLIGENTCASE("IntelligentCase");

    private String value;

    CaseMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CaseMethodEnum fromValue(String text) {
      for (CaseMethodEnum b : CaseMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CaseMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CaseMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CaseMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CaseMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("CaseMethod")
  private CaseMethodEnum caseMethod = CaseMethodEnum.INTELLIGENTCASE;

  @SerializedName("PaletteName")
  private String paletteName = "ProWritingAid";

  @SerializedName("MaximumWordCount")
  private Integer maximumWordCount = 100;

  @SerializedName("RemoveCommonWords")
  private Boolean removeCommonWords = true;

  @SerializedName("FontName")
  private String fontName = "Arial";

  @SerializedName("Width")
  private Integer width = 200;

  @SerializedName("Height")
  private Integer height = 200;

  @SerializedName("OnlySentimentWords")
  private Boolean onlySentimentWords = false;

  /**
   * Document&#39;s writing style
   */
  @JsonAdapter(StyleEnum.Adapter.class)
  public enum StyleEnum {
    NOTSET("NotSet"),
    
    GENERAL("General"),
    
    ACADEMIC("Academic"),
    
    BUSINESS("Business"),
    
    TECHNICAL("Technical"),
    
    CREATIVE("Creative"),
    
    CASUAL("Casual"),
    
    WEB("Web");

    private String value;

    StyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StyleEnum fromValue(String text) {
      for (StyleEnum b : StyleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StyleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StyleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Style")
  private StyleEnum style = StyleEnum.GENERAL;

  /**
   * Document&#39;s language. Set correct UK/US language to get region-specific suggestions
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    EN_US("en_US"),
    
    EN_UK("en_UK"),
    
    EN_AU("en_AU"),
    
    EN_CA("en_CA"),
    
    EN("en"),
    
    ES("es");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String text) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LanguageEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Language")
  private LanguageEnum language = LanguageEnum.EN;

  public WordCloudRequest text(String text) {
    this.text = text;
    return this;
  }

   /**
   * The text to be turned into a Word Cloud
   * @return text
  **/
  @ApiModelProperty(required = true, value = "The text to be turned into a Word Cloud")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public WordCloudRequest orientation(OrientationEnum orientation) {
    this.orientation = orientation;
    return this;
  }

   /**
   * The orientation of the text
   * @return orientation
  **/
  @ApiModelProperty(required = true, value = "The orientation of the text")
  public OrientationEnum getOrientation() {
    return orientation;
  }

  public void setOrientation(OrientationEnum orientation) {
    this.orientation = orientation;
  }

  public WordCloudRequest caseMethod(CaseMethodEnum caseMethod) {
    this.caseMethod = caseMethod;
    return this;
  }

   /**
   * The method to be used for casing
   * @return caseMethod
  **/
  @ApiModelProperty(required = true, value = "The method to be used for casing")
  public CaseMethodEnum getCaseMethod() {
    return caseMethod;
  }

  public void setCaseMethod(CaseMethodEnum caseMethod) {
    this.caseMethod = caseMethod;
  }

  public WordCloudRequest paletteName(String paletteName) {
    this.paletteName = paletteName;
    return this;
  }

   /**
   * The name of the palette
   * @return paletteName
  **/
  @ApiModelProperty(required = true, value = "The name of the palette")
  public String getPaletteName() {
    return paletteName;
  }

  public void setPaletteName(String paletteName) {
    this.paletteName = paletteName;
  }

  public WordCloudRequest maximumWordCount(Integer maximumWordCount) {
    this.maximumWordCount = maximumWordCount;
    return this;
  }

   /**
   * the maximum number of words to be created
   * @return maximumWordCount
  **/
  @ApiModelProperty(required = true, value = "the maximum number of words to be created")
  public Integer getMaximumWordCount() {
    return maximumWordCount;
  }

  public void setMaximumWordCount(Integer maximumWordCount) {
    this.maximumWordCount = maximumWordCount;
  }

  public WordCloudRequest removeCommonWords(Boolean removeCommonWords) {
    this.removeCommonWords = removeCommonWords;
    return this;
  }

   /**
   * Should Common words be removed from the cloud
   * @return removeCommonWords
  **/
  @ApiModelProperty(required = true, value = "Should Common words be removed from the cloud")
  public Boolean getRemoveCommonWords() {
    return removeCommonWords;
  }

  public void setRemoveCommonWords(Boolean removeCommonWords) {
    this.removeCommonWords = removeCommonWords;
  }

  public WordCloudRequest fontName(String fontName) {
    this.fontName = fontName;
    return this;
  }

   /**
   * The name of the font to use
   * @return fontName
  **/
  @ApiModelProperty(required = true, value = "The name of the font to use")
  public String getFontName() {
    return fontName;
  }

  public void setFontName(String fontName) {
    this.fontName = fontName;
  }

  public WordCloudRequest width(Integer width) {
    this.width = width;
    return this;
  }

   /**
   * The width of the image to produce
   * @return width
  **/
  @ApiModelProperty(required = true, value = "The width of the image to produce")
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }

  public WordCloudRequest height(Integer height) {
    this.height = height;
    return this;
  }

   /**
   * The height of the image to produce
   * @return height
  **/
  @ApiModelProperty(required = true, value = "The height of the image to produce")
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }

  public WordCloudRequest onlySentimentWords(Boolean onlySentimentWords) {
    this.onlySentimentWords = onlySentimentWords;
    return this;
  }

   /**
   * Only use the sentiment words from the text
   * @return onlySentimentWords
  **/
  @ApiModelProperty(required = true, value = "Only use the sentiment words from the text")
  public Boolean getOnlySentimentWords() {
    return onlySentimentWords;
  }

  public void setOnlySentimentWords(Boolean onlySentimentWords) {
    this.onlySentimentWords = onlySentimentWords;
  }

  public WordCloudRequest style(StyleEnum style) {
    this.style = style;
    return this;
  }

   /**
   * Document&#39;s writing style
   * @return style
  **/
  @ApiModelProperty(required = true, value = "Document's writing style")
  public StyleEnum getStyle() {
    return style;
  }

  public void setStyle(StyleEnum style) {
    this.style = style;
  }

  public WordCloudRequest language(LanguageEnum language) {
    this.language = language;
    return this;
  }

   /**
   * Document&#39;s language. Set correct UK/US language to get region-specific suggestions
   * @return language
  **/
  @ApiModelProperty(required = true, value = "Document's language. Set correct UK/US language to get region-specific suggestions")
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WordCloudRequest wordCloudRequest = (WordCloudRequest) o;
    return Objects.equals(this.text, wordCloudRequest.text) &&
        Objects.equals(this.orientation, wordCloudRequest.orientation) &&
        Objects.equals(this.caseMethod, wordCloudRequest.caseMethod) &&
        Objects.equals(this.paletteName, wordCloudRequest.paletteName) &&
        Objects.equals(this.maximumWordCount, wordCloudRequest.maximumWordCount) &&
        Objects.equals(this.removeCommonWords, wordCloudRequest.removeCommonWords) &&
        Objects.equals(this.fontName, wordCloudRequest.fontName) &&
        Objects.equals(this.width, wordCloudRequest.width) &&
        Objects.equals(this.height, wordCloudRequest.height) &&
        Objects.equals(this.onlySentimentWords, wordCloudRequest.onlySentimentWords) &&
        Objects.equals(this.style, wordCloudRequest.style) &&
        Objects.equals(this.language, wordCloudRequest.language);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, orientation, caseMethod, paletteName, maximumWordCount, removeCommonWords, fontName, width, height, onlySentimentWords, style, language);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WordCloudRequest {\n");
    
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    caseMethod: ").append(toIndentedString(caseMethod)).append("\n");
    sb.append("    paletteName: ").append(toIndentedString(paletteName)).append("\n");
    sb.append("    maximumWordCount: ").append(toIndentedString(maximumWordCount)).append("\n");
    sb.append("    removeCommonWords: ").append(toIndentedString(removeCommonWords)).append("\n");
    sb.append("    fontName: ").append(toIndentedString(fontName)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    onlySentimentWords: ").append(toIndentedString(onlySentimentWords)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

